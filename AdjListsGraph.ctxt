#BlueJ class context
comment0.target=AdjListsGraph
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\r\n\ Constructor.\ Creates\ an\ empty\ graph.\r\n
comment10.params=
comment10.target=boolean\ isUndirected()
comment10.text=\r\n\ Returns\ true\ IFF\ the\ graph\ is\ undirected,\ that\ is,\ for\ every\ \r\n\ \ \ \ pair\ of\ nodes\ i,j\ for\ which\ there\ is\ an\ arc,\ the\ opposite\ arc\r\n\ \ \ \ is\ also\ present\ in\ the\ graph.\ \ \r\n\ An\ empty\ graph\ is\ undirected\ \#\#\#\#is\ that\ all\ right?????\r\n
comment11.params=vertex
comment11.target=void\ addVertex(java.lang.Object)
comment12.params=index
comment12.target=java.lang.Object\ getVertex(int)
comment12.text=\ Returns\ the\ object\ associated\ with\ a\ vertex\ index.\r\nIf\ the\ vertex\ does\ not\ exist,\ a\ null\ is\ returned.
comment13.params=vertex
comment13.target=void\ removeVertex(java.lang.Object)
comment13.text=\r\n\ Removes\ a\ single\ vertex\ with\ the\ given\ value\ from\ the\ graph.\ \ \r\n\ Uses\ equals()\ for\ testing\ equality\r\n
comment14.params=index
comment14.target=void\ removeVertex(int)
comment14.text=\r\n\ \ \ \ Helper.\ Removes\ a\ vertex\ at\ the\ given\ index\ from\ the\ graph.\ \ \ \r\n\ \ \ \ Note\ that\ this\ may\ affect\ the\ index\ values\ of\ other\ vertices.\r\n
comment15.params=vertex1\ vertex2
comment15.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment15.text=\r\n\ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ addition.\r\n
comment16.params=source\ destination
comment16.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment16.text=\r\n\ Inserts\ an\ arc\ from\ v1\ to\ v2.\r\n\ If\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \r\n
comment17.params=index1\ index2
comment17.target=void\ addArc(int,\ int)
comment18.params=vertex1\ vertex2
comment18.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment18.text=\r\n\ Removes\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ removal.\r\n
comment19.params=vertex1\ vertex2
comment19.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment19.text=\r\n\ Removes\ an\ arc\ from\ vertex\ v1\ to\ vertex\ v2,\r\n\ if\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \r\n
comment2.params=g
comment2.target=AdjListsGraph(AdjListsGraph)
comment2.text=\r\n\ Constructor\ 2.\ Creates\ a\ new\ graph\ with\ same\ vertices\ and\ arcs\ as\ input.\r\n
comment20.params=index1\ index2
comment20.target=void\ removeArc(int,\ int)
comment20.text=\r\n\ Helper.\ Removes\ an\ arc\ from\ index\ v1\ to\ index\ v2.\r\n
comment21.params=vertex
comment21.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment21.text=\r\n\ Retrieve\ from\ a\ graph\ the\ vertices\ x\ pointing\ to\ vertex\ v\ (x->v)\r\n\ and\ returns\ them\ onto\ a\ linked\ list\r\n
comment22.params=vertex
comment22.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment22.text=\r\n\ Retrieve\ from\ a\ graph\ the\ vertices\ x\ following\ vertex\ v\ (v->x)\r\n\ and\ returns\ them\ onto\ a\ linked\ list\r\n
comment23.params=
comment23.target=java.lang.String\ toString()
comment24.params=fName
comment24.target=void\ saveToTGF(java.lang.String)
comment24.text=\r\n\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\r\n\ If\ it\ cannot\ save\ the\ file,\ a\ message\ is\ printed.\ \r\n
comment25.params=args
comment25.target=void\ main(java.lang.String[])
comment3.params=tgf_file_name
comment3.target=AdjListsGraph\ AdjListsGraphFromFile(java.lang.String)
comment3.text=\r\n\ Creates\ and\ returns\ a\ new\ graph\ using\ the\ data\ found\ in\ the\ input\ file.\r\n\ If\ the\ file\ does\ not\ exist,\ a\ message\ is\ printed.\ \r\n
comment4.params=
comment4.target=boolean\ isEmpty()
comment4.text=\r\n\ Returns\ true\ if\ the\ graph\ is\ empty\ and\ false\ otherwise.\ \r\n
comment5.params=
comment5.target=int\ getNumVertices()
comment5.text=\r\n\ Returns\ the\ number\ of\ vertices\ in\ the\ graph.\r\n
comment6.params=
comment6.target=int\ getNumArcs()
comment6.text=\r\n\ Returns\ the\ number\ of\ arcs\ in\ the\ graph\ by\ counting\ them.\r\n
comment7.params=vertex
comment7.target=boolean\ containsVertex(java.lang.Object)
comment7.text=Returns\ true\ if\ this\ graph\ contains\ the\ vertex,\ false\ otherwise.
comment8.params=vertex1\ vertex2
comment8.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment8.text=\r\n\ Returns\ true\ iff\ a\ directed\ edge\ exists\ from\ v1\ to\ v2.\r\n
comment9.params=vertex1\ vertex2
comment9.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment9.text=\r\n\ \ \ \ Returns\ true\ iff\ an\ edge\ exists\ between\ two\ given\ vertices\r\n\ \ \ \ which\ means\ that\ two\ corresponding\ arcs\ exist\ in\ the\ graph\r\n
numComments=26
